import concurrent.futures
import time

def test_password(service, ip, username, password):
    # Simula la prueba de la contraseña con un retardo
    time.sleep(0.1)  # Simula el tiempo de espera de una respuesta del servidor
    return f"Probando {username}:{password} en {service}://{ip}."

def main():
    # Solicitar detalles para la prueba de fuerza bruta
    servicio = input("Introduce el tipo de servicio (ssh/ftp): ")
    ip = input("Introduce la IP del servidor: ")
    username = input("Introduce el nombre de usuario: ")

    # Cargar el diccionario rockyou desde la ubicación estándar
    try:
        with open("/usr/share/wordlists/rockyou.txt", "r", encoding="latin-1") as file:
            passwords = file.read().splitlines()
    except FileNotFoundError:
        print("Error: El archivo rockyou.txt no fue encontrado en la ruta especificada.")
        return

    # Usar ThreadPoolExecutor para manejar múltiples hilos
    max_workers = 20  # Ajustado a 20 hilos
    print(f"Iniciando prueba con {max_workers} hilos...")
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        # Enviar las tareas de prueba de contraseña al pool de hilos
        future_to_password = {executor.submit(test_password, servicio, ip, username, password): password for password in passwords}
        for future in concurrent.futures.as_completed(future_to_password):
            password = future_to_password[future]
            try:
                result = future.result()
                print(result)
            except Exception as exc:
                print(f'{password} generó una excepción: {exc}')

if __name__ == "__main__":
    main()
