import hashlib
import base64
import re
import pyperclip

# Lista de patrones de expresiones regulares para identificar tipos de hashes
hash_patterns = {
    "md5": r"^[0-9a-fA-F]{32}$",
    "sha1": r"^[0-9a-fA-F]{40}$",
    "sha224": r"^[0-9a-fA-F]{56}$",
    "sha256": r"^[0-9a-fA-F]{64}$",
    "sha384": r"^[0-9a-fA-F]{96}$",
    "sha512": r"^[0-9a-fA-F]{128}$",
    "ripemd160": r"^[0-9a-fA-F]{40}$",
    "whirlpool": r"^[0-9a-fA-F]{128}$",
    "blake2s": r"^[0-9a-fA-F]{64}$",
    "blake2b": r"^[0-9a-fA-F]{128}$",
    "md4": r"^[0-9a-fA-F]{32}$",
    "mdc2": r"^[0-9a-fA-F]{32}$",
    "gost94": r"^[0-9a-fA-F]{64}$",
    "base64": r"^[a-zA-Z0-9+/]*={0,2}$",  # Patrón Base64
    # Agrega más patrones según tus necesidades
}

def identify_and_decrypt_hash(input_hash):
    if input_hash.startswith(("http://", "https://")):
        return "Este parece ser un enlace web."

    for hash_type, pattern in hash_patterns.items():
        if re.match(pattern, input_hash):
            pyperclip.copy(input_hash)  # Copiar al portapapeles
            if hash_type == "base64":
                decoded_hash = base64.b64decode(input_hash).decode('utf-8', 'ignore')
                return f"El hash parece ser de tipo {hash_type.upper()}. Valor decodificado: {decoded_hash}"
            elif hash_type in hashlib.algorithms_guaranteed:
                try:
                    decoded_hash = hashlib.new(hash_type, input_hash.encode()).hexdigest()
                    return f"El hash parece ser de tipo {hash_type.upper()}. Valor decodificado: {decoded_hash}"
                except Exception as e:
                    pass
    return "No se pudo identificar el tipo de hash o descifrarlo."

# Ejemplo de uso
hash_input = input("Ingresa el hash a identificar y descifrar: ").strip()
result = identify_and_decrypt_hash(hash_input)
print(result)
